<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Microsoft.Scripting.Actions.Calls Namespace</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Microsoft.Scripting.Actions.Calls namespace" /><meta name="Microsoft.Help.F1" content="Microsoft.Scripting.Actions.Calls" /><meta name="Microsoft.Help.Id" content="N:Microsoft.Scripting.Actions.Calls" /><meta name="Description" content="summaryN:Microsoft.Scripting.Actions.Calls" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Microsoft.Scripting.Actions.Calls" /><meta name="file" content="49ae263e-4897-6800-f642-af1ff32b3362" /><meta name="guid" content="49ae263e-4897-6800-f642-af1ff32b3362" /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">A Sandcastle Documented Class Library<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html\5c40d2a7-638e-43e6-8a88-431a59427f20.htm" title="A Sandcastle Documented Class Library" tocid="roottoc">A Sandcastle Documented Class Library</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/49ae263e-4897-6800-f642-af1ff32b3362.htm" title="Microsoft.Scripting.Actions.Calls" tocid="49ae263e-4897-6800-f642-af1ff32b3362">Microsoft.Scripting.Actions.Calls</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/570bc84d-7132-4611-c1ec-6a89bbb36231.htm" title="ActualArguments Class" tocid="570bc84d-7132-4611-c1ec-6a89bbb36231">ActualArguments Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/57c67edc-a136-27e9-f93a-d9ef1dad41ec.htm" title="ApplicableCandidate Class" tocid="57c67edc-a136-27e9-f93a-d9ef1dad41ec">ApplicableCandidate Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/6edfc69d-53c2-6a38-0e31-e236dd89888b.htm" title="ArgBuilder Class" tocid="6edfc69d-53c2-6a38-0e31-e236dd89888b">ArgBuilder Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/3fc6c349-f730-68c2-dd46-d72860db6049.htm" title="ArgumentBinding Structure" tocid="3fc6c349-f730-68c2-dd46-d72860db6049">ArgumentBinding Structure</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/9dab6d1e-75fc-da05-09fa-297070a7e578.htm" title="BindingResult Enumeration" tocid="9dab6d1e-75fc-da05-09fa-297070a7e578">BindingResult Enumeration</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/195cfcc2-08c4-6747-d21b-52b885653834.htm" title="BindingTarget Class" tocid="195cfcc2-08c4-6747-d21b-52b885653834">BindingTarget Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/dd794996-8716-4149-8d18-7271b43ee788.htm" title="CallFailure Class" tocid="dd794996-8716-4149-8d18-7271b43ee788">CallFailure Class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/76229ff2-7ed9-cfd0-147b-1b6863825fb7.htm" title="CallFailureReason Enumeration" tocid="76229ff2-7ed9-cfd0-147b-1b6863825fb7">CallFailureReason Enumeration</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/d8f6f539-4093-81ce-ae22-ccf1bf667cab.htm" title="Candidate Enumeration" tocid="d8f6f539-4093-81ce-ae22-ccf1bf667cab">Candidate Enumeration</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/f39a9e67-1152-a74a-ddce-3cf5dec10a6b.htm" title="ConversionResult Class" tocid="f39a9e67-1152-a74a-ddce-3cf5dec10a6b">ConversionResult Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/e6a52611-a6cd-0eea-3f03-c79bddc0befb.htm" title="IInferableInvokable Interface" tocid="e6a52611-a6cd-0eea-3f03-c79bddc0befb">IInferableInvokable Interface</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/5e16dae7-d42d-fb64-ebf9-aaea95fda819.htm" title="InferenceResult Class" tocid="5e16dae7-d42d-fb64-ebf9-aaea95fda819">InferenceResult Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/b85ae2db-56a5-ce14-f2e3-4ad767298899.htm" title="InstanceBuilder Class" tocid="b85ae2db-56a5-ce14-f2e3-4ad767298899">InstanceBuilder Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/8390543c-0d54-e387-5b6e-627a8b455144.htm" title="MethodCandidate Class" tocid="8390543c-0d54-e387-5b6e-627a8b455144">MethodCandidate Class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/3ed40459-2609-e173-7356-45b889f7a0b2.htm" title="NarrowingLevel Enumeration" tocid="3ed40459-2609-e173-7356-45b889f7a0b2">NarrowingLevel Enumeration</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/69542b03-0291-8ee2-f7d0-08c5a583925c.htm" title="OverloadInfo Class" tocid="69542b03-0291-8ee2-f7d0-08c5a583925c">OverloadInfo Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/ebb640e1-2377-9fe2-b698-ec7f20d82c3b.htm" title="OverloadResolver Class" tocid="ebb640e1-2377-9fe2-b698-ec7f20d82c3b">OverloadResolver Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/c14d7f81-1a01-d5e7-681b-0214d7484007.htm" title="OverloadResolverFactory Class" tocid="c14d7f81-1a01-d5e7-681b-0214d7484007">OverloadResolverFactory Class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/3de22a0a-35b4-3b98-4de7-8a8f1bf71520.htm" title="ParameterBindingFlags Enumeration" tocid="3de22a0a-35b4-3b98-4de7-8a8f1bf71520">ParameterBindingFlags Enumeration</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/2b984632-46a9-4ca6-9d9a-d9f995f8366a.htm" title="ParameterMapping Class" tocid="2b984632-46a9-4ca6-9d9a-d9f995f8366a">ParameterMapping Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/b3973ce8-a1e2-b48a-87c5-c38366724693.htm" title="ParameterWrapper Class" tocid="b3973ce8-a1e2-b48a-87c5-c38366724693">ParameterWrapper Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/a5b2c67d-8682-ab21-3de1-2559b2cd7a7e.htm" title="ReflectionOverloadInfo Class" tocid="a5b2c67d-8682-ab21-3de1-2559b2cd7a7e">ReflectionOverloadInfo Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/fa76c394-1d49-db55-02d1-b946d0811d08.htm" title="RestrictedArguments Class" tocid="fa76c394-1d49-db55-02d1-b946d0811d08">RestrictedArguments Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/9b18c3ed-95a2-dca4-5417-620dd2bb403a.htm" title="SimpleArgBuilder Class" tocid="9b18c3ed-95a2-dca4-5417-620dd2bb403a">SimpleArgBuilder Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/e74c376f-6702-8cc9-24c0-eeffa8f1e29f.htm" title="TypeInferer Class" tocid="e74c376f-6702-8cc9-24c0-eeffa8f1e29f">TypeInferer Class</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Help.png" /></td><td class="titleColumn"><h1>Microsoft.Scripting.Actions.Calls Namespace</h1></td></tr></table><span class="introStyle"></span> <div class="summary"><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;summary&gt; documentation for "N:Microsoft.Scripting.Actions.Calls"]</p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Classes</span></div><div id="ID0RBSection" class="collapsibleSection"><table class="members" id="classList"><tr><th class="iconColumn">
					 
				</th><th>Class</th><th>Description</th></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="570bc84d-7132-4611-c1ec-6a89bbb36231.htm">ActualArguments</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="57c67edc-a136-27e9-f93a-d9ef1dad41ec.htm">ApplicableCandidate</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="6edfc69d-53c2-6a38-0e31-e236dd89888b.htm">ArgBuilder</a></td><td><div class="summary">
            ArgBuilder provides an argument value used by the MethodBinder.  One ArgBuilder exists for each
            physical parameter defined on a method.  
            
            Contrast this with ParameterWrapper which represents the logical argument passed to the method.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="195cfcc2-08c4-6747-d21b-52b885653834.htm">BindingTarget</a></td><td><div class="summary">
            Encapsulates the result of an attempt to bind to one or methods using the OverloadResolver.
            
            Users should first check the Result property to see if the binding was successful or
            to determine the specific type of failure that occured.  If the binding was successful
            MakeExpression can then be called to create an expression which calls the method.
            If the binding was a failure callers can then create a custom error message based upon
            the reason the call failed.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="dd794996-8716-4149-8d18-7271b43ee788.htm">CallFailure</a></td><td><div class="summary">
            Represents the reason why a call to a specific method could not be performed by the OverloadResolver.
            
            The reason for the failure is specified by the CallFailureReason property.  Once this property
            has been consulted the other properties can be consulted for more detailed information regarding
            the failure.
            
            If reason is ConversionFailure the ConversionResults property will be non-null.
            If reason is UnassignableKeyword the KeywordArguments property will be non-null and include
                the keywords which could not be assigned.
            If reason is DuplicateKeyword the KeywordArguments property will be non-null and include
                the keywords which were duplicated (either by the keywords themselves or by positional
                arguments).
                
            MethodTarget is always set and indicates the method which failed to bind.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="f39a9e67-1152-a74a-ddce-3cf5dec10a6b.htm">ConversionResult</a></td><td><div class="summary">
            Represents information about a failure to convert an argument from one
            type to another.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="5e16dae7-d42d-fb64-ebf9-aaea95fda819.htm">InferenceResult</a></td><td><div class="summary">
            Provides information about the result of a custom object which dynamically
            infers back types.
            
            Currently only used for invokable objects to feedback the types for a delegate
            type.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="b85ae2db-56a5-ce14-f2e3-4ad767298899.htm">InstanceBuilder</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="8390543c-0d54-e387-5b6e-627a8b455144.htm">MethodCandidate</a></td><td><div class="summary">
             MethodCandidate represents the different possible ways of calling a method or a set of method overloads.
             A single method can result in multiple MethodCandidates. Some reasons include:
             - Every optional parameter or parameter with a default value will result in a candidate
             - The presence of ref and out parameters will add a candidate for languages which want to return the updated values as return values.
             - ArgumentKind.List and ArgumentKind.Dictionary can result in a new candidate per invocation since the list might be different every time.
            
             Each MethodCandidate represents the parameter type for the candidate using ParameterWrapper.
             </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="69542b03-0291-8ee2-f7d0-08c5a583925c.htm">OverloadInfo</a></td><td><div class="summary">
            Defines a method overload abstraction for the purpose of overload resolution. 
            It provides the overload resolver the metadata it needs to perform the resolution.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="ebb640e1-2377-9fe2-b698-ec7f20d82c3b.htm">OverloadResolver</a></td><td><div class="summary">
            Provides binding and overload resolution to .NET methods.
            
            MethodBinder's can be used for:
                generating new AST code for calling a method 
                calling a method via reflection at runtime
                (not implemented) performing an abstract call
                
            MethodBinder's support default arguments, optional arguments, by-ref (in and out), and keyword arguments.
            
            Implementation Details:
            
            The MethodBinder works by building up a CandidateSet for each number of effective arguments that can be
            passed to a set of overloads.  For example a set of overloads such as:
                foo(object a, object b, object c)
                foo(int a, int b)
                
            would have 2 target sets - one for 3 parameters and one for 2 parameters.  For parameter arrays
            we fallback and create the appropriately sized CandidateSet on demand.
            
            Each CandidateSet consists of a set of MethodCandidate's.  Each MethodCandidate knows the flattened
            parameters that could be received.  For example for a function such as:
                foo(params int[] args)
                
            When this method is in a CandidateSet of size 3 the MethodCandidate takes 3 parameters - all of them
            ints; if it's in a CandidateSet of size 4 it takes 4 parameters.  Effectively a MethodCandidate is 
            a simplified view that allows all arguments to be treated as required positional arguments.
            
            Each MethodCandidate in turn refers to a MethodTarget.  The MethodTarget is composed of a set
            of ArgBuilder's and a ReturnBuilder which know how to consume the positional arguments and pass
            them to the appropriate argument of the destination method.  This includes routing keyword
            arguments to the correct position, providing the default values for optional arguments, etc...
            
            After binding is finished the MethodCandidates are thrown away and a BindingTarget is returned. 
            The BindingTarget indicates whether the binding was successful and if not any additional information
            that should be reported to the user about the failed binding.  It also exposes the MethodTarget which
            allows consumers to get the flattened list of required parameters for the call.  MethodCandidates
            are not exposed and are an internal implementation detail of the MethodBinder.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="c14d7f81-1a01-d5e7-681b-0214d7484007.htm">OverloadResolverFactory</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="2b984632-46a9-4ca6-9d9a-d9f995f8366a.htm">ParameterMapping</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="b3973ce8-a1e2-b48a-87c5-c38366724693.htm">ParameterWrapper</a></td><td><div class="summary">
            ParameterWrapper represents the logical view of a parameter. For eg. the byref-reduced signature
            of a method with byref parameters will be represented using a ParameterWrapper of the underlying
            element type, since the logical view of the byref-reduced signature is that the argument will be
            passed by value (and the updated value is included in the return value).
            
            Contrast this with ArgBuilder which represents the real physical argument passed to the method.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="a5b2c67d-8682-ab21-3de1-2559b2cd7a7e.htm">ReflectionOverloadInfo</a></td><td><div class="summary">
            Represents a method overload that is bound to a <a href="http://msdn2.microsoft.com/en-us/library/29c267yf" target="_blank">MethodBase</a>.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="fa76c394-1d49-db55-02d1-b946d0811d08.htm">RestrictedArguments</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="9b18c3ed-95a2-dca4-5417-620dd2bb403a.htm">SimpleArgBuilder</a></td><td><div class="summary">
            SimpleArgBuilder produces the value produced by the user as the argument value.  It
            also tracks information about the original parameter and is used to create extended
            methods for params arrays and param dictionary functions.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="e74c376f-6702-8cc9-24c0-eeffa8f1e29f.htm">TypeInferer</a></td><td /></tr></table></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Structures</span></div><div id="ID1RBSection" class="collapsibleSection"><table class="members" id="structureList"><tr><th class="iconColumn">
					 
				</th><th>Structure</th><th>Description</th></tr><tr data="structure; public"><td><img src="../icons/pubstructure.gif" alt="Public structure" title="Public structure" /></td><td><a href="3fc6c349-f730-68c2-dd46-d72860db6049.htm">ArgumentBinding</a></td><td /></tr></table></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Interfaces</span></div><div id="ID2RBSection" class="collapsibleSection"><table class="members" id="interfaceList"><tr><th class="iconColumn">
					 
				</th><th>Interface</th><th>Description</th></tr><tr data="interface; public"><td><img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="e6a52611-a6cd-0eea-3f03-c79bddc0befb.htm">IInferableInvokable</a></td><td><div class="summary">
            Implemented by DynamicMetaObject subclasses when the associated object
            can participate in generic method type inference.  This interface
            is used when the inference engine is attempting to perform type inference
            for a parameter which is typed to a delegate type.
            </div></td></tr></table></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Enumerations</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="enumerationList"><tr><th class="iconColumn">
					 
				</th><th>Enumeration</th><th>Description</th></tr><tr data="enumeration; public"><td><img src="../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" /></td><td><a href="9dab6d1e-75fc-da05-09fa-297070a7e578.htm">BindingResult</a></td><td><div class="summary">
            Indicates the specific type of failure, if any, from binding to a method.
            </div></td></tr><tr data="enumeration; public"><td><img src="../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" /></td><td><a href="76229ff2-7ed9-cfd0-147b-1b6863825fb7.htm">CallFailureReason</a></td><td /></tr><tr data="enumeration; public"><td><img src="../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" /></td><td><a href="d8f6f539-4093-81ce-ae22-ccf1bf667cab.htm">Candidate</a></td><td /></tr><tr data="enumeration; public"><td><img src="../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" /></td><td><a href="3ed40459-2609-e173-7356-45b889f7a0b2.htm">NarrowingLevel</a></td><td><div class="summary">
            Narrowing conversions are conversions that cannot be proved to always succeed, conversions that are 
            known to possibly lose information, and conversions across domains of types sufficiently different 
            to merit narrowing notation like casts. 
            
            Its upto every language to define the levels for conversions. The narrowling levels can be used by
            for method overload resolution, where the overload is based on the parameter types (and not the number 
            of parameters).
            </div></td></tr><tr data="enumeration; public"><td><img src="../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" /></td><td><a href="3de22a0a-35b4-3b98-4de7-8a8f1bf71520.htm">ParameterBindingFlags</a></td><td /></tr></table></div></div></div><div id="pageFooter" class="pageFooter"> </div></body></html>